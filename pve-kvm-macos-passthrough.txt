This is probably obvious, but it is non-obvious to people who have not done it before:

per https://www.nicksherlock.com/2018/11/my-macos-vm-proxmox-setup/ and especially section "hookscript" you need to figure out both the PCI IDs and PCI bus locations of the devices you wish to pass through.

The format of PCI address in `lspci` corresponds to device files in /sys as follows:

04:00.0 == 0000:04:00.0

root@Ymir:/sys/bus/pci/devices# lspci -nn | grep -i ASM
04:00.0 USB controller [0c03]: ASMedia Technology Inc. ASM2142 USB 3.1 Host Controller [1b21:2142]

This can be validated as follows:

root@Ymir:/sys/bus/pci/devices# cd 0000\:04\:00.0
root@Ymir:/sys/bus/pci/devices/0000:04:00.0# cat uevent
DRIVER=xhci_hcd
PCI_CLASS=C0330
PCI_ID=1B21:2142
PCI_SUBSYS_ID=1B21:2142
PCI_SLOT_NAME=0000:04:00.0
MODALIAS=pci:v00001B21d00002142sv00001B21sd00002142bc0Csc03i30

Match the PCI_SUBSYS_ID inside the `uevent` file to the PCI subsystem ID presented by `lspci`

ADDITIONALLY:

The 'hookscript' (manually create in /var/lib/vz/snippets/hackintosh.sh) says to unbind the device with
echo 0000:04:00.0 > /sys/bus/pci/devices/0000\:04\:00.0/driver/unbind

Then attach them to vfio with 
echo 1b21 2142 > /sys/bus/pci/drivers/vfio-pci/new_id

/sys/bus/pci/drivers/vfio-pci is *not* present by default; /sys/bus/pci/drivers/virtio-pci is present by default; both have similar options inside their respective sysbus directories. Don't be misled-- they are not equivalent!

per https://pve.proxmox.com/wiki/Pci_passthrough,

To enable vfio, first enable IOMMU:
append 'intel_iommu=on' to the kernel command line (in /etc/default/grub)

then enable vfio by dropping the following 4 lines into /etc/modules

vfio
vfio_iommu_type1
vfio_pci
vfio_virqfd

Reboot, run `dmesg | grep -e DMAR -e IOMMU` and check for 'DMAR: IOMMU enabled'; if yes, check /sys/bus/pci/drivers for vfio-pci

Worked For Meâ„¢ on Xeon L5640 Westmere EP/MacPro5,1 in Proxmox 7.1, 2022-01-02

For BAR errors, see also: https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#%22BAR_3:_cannot_reserve_[mem]%22_error_in_dmesg_after_starting_VM
and https://old.reddit.com/r/Proxmox/comments/ku6eof/gpu_passthrough_troubleshooting_constant_bar_0/

See also https://forum.proxmox.com/threads/gpu-passthrough-tutorial-reference.34303/ for a nice, concise summary


--

For some dumb fucking reason, I don't get any output on the GPU *AND* the VM never finishes booting unless I leave an emulated graphics adapter attached to the VM, irrespective of x-vga=on or x-vga=1 being set.
My current hackaround for this was to boot with the stupid emulated graphics adapter, VNC in (having enabled this before since it's faster than Proxmox's noVNC), set the GPU's monitor as the primary.
Then I run https://github.com/epalzeolithe/DisableMonitor-3.0 (https://github.com/Eun/DisableMonitor) once and "disable" the emulated device, which gives me full access to native resolutions on my attached DVI 1600x1200 Dell 2007FP monitor. (Setting mirroring did not grant me this full access since the virtual device is pegged at a horizontal resolution lower than 1200, namely 1080).
